name: MZ Pull Request Tests PoC
on:
  pull_request:
    branches: [develop]
    types: [opened, reopened]
jobs:
  setup:
    runs-on: [gasp]
    outputs:
      matrix: ${{ steps.set-input.outputs.MATRIX }}
      scan_type: ${{ steps.set-input.outputs.SCAN_TYPE }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Define matrix
      id: set-input
      run: |
        # Read input json file objects and define them as a matrix
        echo "::set-output name=MATRIX::$(jq -c '.data' .github/config/PR-MZ.json)"
        echo "::set-output name=SCAN_TYPE::$(jq -c '.scan_type' .github/config/PR-MZ.json)"
  test:
    runs-on: [ tf_dataset, Linux ]
    container:
      image: python:3.8
      env:
        http_proxy: ${{ secrets.HTTP_PROXY }}
        https_proxy: ${{ secrets.HTTPS_PROXY }}
        no_proxy: ${{ secrets.NO_PROXY }}
      volumes:
        - /tf_dataset/:/tf_dataset/
      options: --privileged
    needs: setup
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        data: ${{ fromJson(needs.setup.outputs.matrix) }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Install dependencies
      run: |
        apt-get update
        apt-get install bc
    - name: Build workload
      shell: bash
      run: |
        # Run test for specified workload depending if precision exist (int8, fp16, bfloat16, fp32)
        cd tests/cicd/${{ matrix.data.workload }}
        if [ "${{ matrix.data.test.precision[0] }}" != "" ]; then
          ./build.sh ${{ matrix.data.test.batch_size }} ${{ matrix.data.test.precision[0] }} ${{ matrix.data.test.script }} ${{ matrix.data.framework_version }}
        fi
        if [ "${{ matrix.data.test.precision[1] }}" != "" ]; then
          ./build.sh ${{ matrix.data.test.batch_size }} ${{ matrix.data.test.precision[1] }} ${{ matrix.data.test.script }} ${{ matrix.data.framework_version }}
        fi
        if [ "${{ matrix.data.test.precision[2] }}" != "" ]; then
          ./build.sh ${{ matrix.data.test.batch_size }} ${{ matrix.data.test.precision[2] }} ${{ matrix.data.test.script }} ${{ matrix.data.framework_version }}
        fi
        if [ "${{ matrix.data.test.precision[3] }}" != "" ]; then
          ./build.sh ${{ matrix.data.test.batch_size }} ${{ matrix.data.test.precision[3] }} ${{ matrix.data.test.script }} ${{ matrix.data.framework_version }}
        fi
        cd -
    - name: Check performance
      shell: bash
      run: |
        # Compare performace of the test with the benchmark threshold (four possible cases, one for each precision)
        cd .github/utils
        if [ "${{ matrix.data.test.precision[0] }}" != "" ]; then
          ./check_performance.sh ${{ matrix.data.workload }} ${{ matrix.data.test.precision[0] }} ${{ matrix.data.test.benchmark }} ${{ matrix.data.test.benchmark_threshold[0] }}
        fi
        if [ "${{ matrix.data.test.precision[1] }}" != "" ]; then
          ./check_performance.sh ${{ matrix.data.workload }} ${{ matrix.data.test.precision[1] }} ${{ matrix.data.test.benchmark }} ${{ matrix.data.test.benchmark_threshold[1] }}
        fi
        if [ "${{ matrix.data.test.precision[2] }}" != "" ]; then
          ./check_performance.sh ${{ matrix.data.workload }} ${{ matrix.data.test.precision[2] }} ${{ matrix.data.test.benchmark }} ${{ matrix.data.test.benchmark_threshold[2] }}
        fi
        if [ "${{ matrix.data.test.precision[3] }}" != "" ]; then
          ./check_performance.sh ${{ matrix.data.workload }} ${{ matrix.data.test.precision[3] }} ${{ matrix.data.test.benchmark }} ${{ matrix.data.test.benchmark_threshold[3] }}
        fi
        cd -
    - uses: actions/upload-artifact@v3
      with:
        name: result-artifact
        path: tests/cicd/${{ matrix.data.workload }}/output/*
  scan:
    needs: setup
    strategy:
      fail-fast: false
      matrix: 
        scan_type: ${{ fromJson(needs.setup.outputs.scan_type) }}
    uses: intel-innersource/frameworks.ai.models.intel-models/.github/workflows/scans.yml@gda/pr-poc
    with:
      scan_type: ${{ matrix.scan_type }}
    secrets: inherit
