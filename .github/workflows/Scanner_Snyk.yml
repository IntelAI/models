name: Scanner-Snyk
on:
  workflow_call:
    inputs:
      repos:
        description: 'Enter the intel-innersource Project repo name:'
        type: string
        required: true
      ref:
        description: 'Enter Project branch, tag:'
        required: true
        type: string
      scan_type:
        description: 'Scan type for Snyk'
        required: false
        type: string
        default: 'monitor'
      snyk_org:
        description: 'Enter synk org: (eg- iags_mlp)'
        required: true
        type: string
    secrets:
      SNYK_API_TOKEN:
        description: 'Enter Snyk Api Token:'
        required: true
      token:
        description: 'GITHUB_TOKEN or a repo scoped PAT.'
        required: true
  workflow_dispatch:
    inputs:
      repos:
        description: 'Enter the intel-innersource Project repo name:'
        type: string
        required: true
      ref:
        description: 'Enter Project branch, tag:'
        required: true
        type: string
      scan_type:
        description: 'Scan type for Snyk'
        required: false
        type: string
        default: 'monitor'
      snyk_org:
        description: 'Enter synk org: (eg- iags_mlp)'
        required: true
        type: string
    secrets:
      SNYK_API_TOKEN:
        description: 'Enter Snyk Api Token:'
        required: true
      token:
        description: 'GITHUB_TOKEN or a repo scoped PAT.'
        required: true
jobs:
  get-requiremets:
    runs-on: [ k8-runners ]
    outputs:
      REQUIREMENTS: ${{ steps.set-requirements.outputs.REQUIREMENTS }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        repository: intel-innersource/${{ inputs.repos }}
        ref: ${{ inputs.ref }}
        submodules: true
    - name: Define matrix
      id: set-requirements
      run: |
        REQS=( $(find $(pwd) -name "requirement*.txt") )
        echo "REQUIREMENTS=$(printf '%s\n' "${REQS[@]}" | jq -R . | jq -s . | jq -c .)" >> "$GITHUB_OUTPUT"
  scan_snyk:
    needs: [get-requiremets]
    runs-on: [ k8-runners ]
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        REQS: ${{ fromJson(needs.get-requiremets.outputs.REQUIREMENTS) }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        repository: intel-innersource/${{ inputs.repos }}
        ref: ${{ inputs.ref }}
        submodules: true
    - name: Run SNYK Scan
      run: |
        export no_proxy+=',snyk.devtools.intel.com'
        export REQ_PATH=$(dirname "${{ matrix.REQS }}")
        docker run -e SNYK_TOKEN=${{ secrets.SNYK_API_TOKEN }} -e SNYK_CFG_ORG=${{ inputs.snyk_org }} -e SNYK_API=https://snyk.devtools.intel.com/api \
          -e http_proxy=${http_proxy} -e https_proxy=${https_proxy} -e no_proxy=${no_proxy} -e HTTP_PROXY=${HTTP_PROXY} \
            -e HTTPS_PROXY=${HTTPS_PROXY} -e NO_PROXY=${NO_PROXY} -v ${REQ_PATH}:/project --rm \
              amr-registry.caas.intel.com/aiops/snyk-cli:1.690.0.python-3.9 ${{  inputs.scan_type }} --project-name='${REQ_PATH}'
        mkdir snyk-output
        BASENAME=$(basename ${REQ_PATH})
        mv ${REQ_PATH}/snyk-result.json ./snyk-output/snyk-result-${BASENAME}.json
    - name: Upload SNYK Artifacts
      if: success()
      uses: actions/upload-artifact@v3
      with:
        name: snyk-log
        path: snyk-output/*
    - name: Cleanup
      if: always()
      run: rm -rf snyk-output
