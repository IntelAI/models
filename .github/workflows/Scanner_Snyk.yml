name: Scanner-Snyk
on:
  workflow_call:
    inputs:
      repos:
        description: 'Enter the intel-innersource Project repo name:'
        type: string
        required: true
      ref:
        description: 'Enter Project branch, tag:'
        required: true
        type: string
      scan_type:
        description: 'Scan type for Snyk'
        required: false
        type: string
        default: 'monitor'
      snyk_org:
        description: 'Enter synk org: (eg- iags_mlp)'
        required: true
        type: string
    secrets:
      SNYK_API_TOKEN:
        description: 'Enter Snyk Api Token:'
        required: true
      token:
        description: 'GITHUB_TOKEN or a repo scoped PAT.'
        required: true    
jobs:
  snyk_job:
    container:
      image: amr-registry.caas.intel.com/cache/library/python@sha256:83657f17ccda774f648eda99c3d209968a3eb18384670d13c400fb0b8eddf8cb
      #image: amr-registry.caas.intel.com/cache/library/python@sha256:b16e0077d815d9b4be56345591fa4c84406a607570cd28caa0848b582bb74399
    #   image: amr-registry.caas.intel.com/cache/library/ubuntu@sha256:dc4807aace484a0de85334af8f57892fa567f35eb99daf784794880a7d103a4f
    #  image: amr-registry.caas.intel.com/cache/library/python@sha256:b16e0077d815d9b4be56345591fa4c84406a607570cd28caa0848b582bb74399
      #gar-registry.caas.intel.com/cache/library/python@sha256:1eb52bfea7337b718f662acdda0a423ac9dc05153194fbe88d898cd0c4140420
      options: --user root --entrypoint bash --privileged  
    runs-on: [self-hosted, gasp]
    steps:
    - uses: actions/checkout@v3
    #- uses: actions/setup-python@v4
    #  with:
    #    python-version: "3.10"    
    - uses: actions/checkout@v2  
    - uses: actions/setup-node@v1
      with:
        node-version: '18'
    - name: 'Install Workspace'
      run: |
        npm install -g npm
        npm install snyk@latest -g
    - name: Checkout Project Repo
      uses: actions/checkout@v3
      with:
        repository: intel-innersource/${{inputs.repos}}
        token: ${{secrets.token}}
        path: ${{inputs.repos}}
        ref: ${{inputs.ref}}
    - name: Install dependencies
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install build
        apt update
        apt install build-essential gcc g++ cmake -y
    - if: inputs.scan_type == 'test'
      name: 'Auth and run Snyk test scan'
      id: data
      shell: bash
      env: 
          no_proxy: snyk.devtools.intel.com, intel.com
      run: |
        export SNYK_API=https://snyk.devtools.intel.com/api
        export SKLEARN_ALLOW_DEPRECATED_SKLEARN_PACKAGE_INSTALL=True
        snyk -d auth ${{ secrets.SNYK_API_TOKEN }}
        find . -name "requirement*.txt" > tmpfile
        for req in $(cat tmpfile); do       
          echo "==========Installing packages================"
          cat tmpfile
          echo $req > /tmp/req.txt
          cat /tmp/req.txt
          pkgs="$(awk -F '${{inputs.repos}}/' '{print $2}' /tmp/req.txt | tr '/' '-' | cut -d '.' -f1)"
          echo "::set-output name=URI::$pkgs"
          python -m pip install -r $req --no-cache-dir
          echo "==========Testing packages for $pkgs =========="
          snyk test --file=$req --command=python3 --package-manager=pip --target-folder=${{inputs.repos}} --json-file-output=$pkgs-analysis-result.json || echo 0
          echo "==========Testing done for $pkgs =============="
        done
        
    - if: inputs.scan_type == 'test'
      name: Upload Scan test artifact to Github
      uses: actions/upload-artifact@v3
      with:
        name: Snyk-log
        path: ${{ github.workspace }}/*-analysis-result.json

    - if: inputs.scan_type == 'monitor'
      name: 'Auth and run Snyk monitor scan'
      env: 
          no_proxy: snyk.devtools.intel.com, intel.com
      run: |
        export SNYK_API=https://snyk.devtools.intel.com/api
        snyk -d auth ${{ secrets.SNYK_API_TOKEN }}
        find . -name "requirement*.txt" > tmpfile
        for req in $(cat tmpfile); do
          echo "==========Installing packages=================="
          cat tmpfile
          echo $req > /tmp/req.txt
          cat /tmp/req.txt
          pkgs="$(awk -F '${{inputs.repos}}/' '{print $2}' /tmp/req.txt | tr '/' '-' | cut -d '.' -f1)"
          echo "::set-output name=URI::$pkgs"
          python -m pip install -r $req --no-cache-dir
          echo "==========Testing packages for $pkgs =========="          
          snyk monitor --file=$req --command=python3 --package-manager=pip --target-folder=${{inputs.repos}} --org=${{inputs.snyk_org}} --project-name=${{github.event.inputs.repos}}/$pkgs > $pkgs-snyk-log
          echo "==========Testing done for $pkgs ================"
        done 
    - if: inputs.scan_type == 'monitor'
      name: Upload Scan monitor artifact to Github
      uses: actions/upload-artifact@v3
      with:
        name: Snyk-log
        path: ${{ github.workspace }}/*snyk-log
