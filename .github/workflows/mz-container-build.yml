name: Model Zoo Containers Build
on:
  workflow_dispatch:
    inputs:
      container_group:
        description: 'Container group name e.g flex-gpu, max-gpu, spr etc'
        required: true
        type: choice
        options:
        - flex-gpu
        - max-gpu
      target_branch:
        description: 'Model zoo branch name'
        default: container-automation
        required: true
        type: string
      env_overrides:
        description: 'Env overrides, especially for base image/tag.'
        default: 'K1=V1,K2=V2'
        required: false
        type: string
      runner_label:
        description: 'Runner label'
        default: pvc-ril
        required: true
        type: string
jobs:
  collect_dirs:
    runs-on: [self-hosted, "${{inputs.runner_label}}"]
    outputs:
      dirs: ${{ steps.set-dirs.outputs.DIRS }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          repository: intel-innersource/frameworks.ai.models.intel-models
          token: ${{ secrets.GITHUB_TOKEN }}
          path: modelzoo
          ref: ${{inputs.target_branch}}
      - name: Save Ouput
        id: set-dirs
        run: |
          cd ${GITHUB_WORKSPACE}/modelzoo/docker/${{inputs.container_group}}
          echo "DIRS=$(ls -d */ | cut -f1 -d'/' | jq --raw-input --slurp --compact-output 'split("\n")[:-1]')" >> $GITHUB_OUTPUT
  build_test_push:
    needs: [collect_dirs]
    runs-on: [self-hosted, "${{inputs.runner_label}}"]
    outputs:
      image: ${{ steps.build-tag.outputs.IMAGE }}
    strategy:
      matrix:
        dir: ${{ fromJson(needs.collect_dirs.outputs.dirs) }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          repository: intel-innersource/frameworks.ai.models.intel-models
          token: ${{ secrets.GITHUB_TOKEN }}
          path: modelzoo
          ref: ${{inputs.target_branch}}
      - name: Build images
        id: build-image
        run: |
          # set input ENV overrides
          str=${{inputs.env_overrides}}
          IFS=',' read -ra kv_pairs <<< "$str"
          for kv_pair in "${kv_pairs[@]}"; do IFS='=' read -ra kv <<< "$kv_pair"; export ${kv[0]}=${kv[1]} ; echo "${kv[0]}=${kv[1]}"; done
          echo "=> ${{ needs.collect_dirs.outputs.dirs }}"
          cd ${GITHUB_WORKSPACE}/modelzoo/docker/${{inputs.container_group}}
          docker compose -f ${{inputs.container_group}}-docker-compose.yml rm -f
          # rebuild images from scratch
          docker compose -f ${{inputs.container_group}}-docker-compose.yml build ${{ matrix.dir }} --no-cache
          # Not needed, but Just so that I can get list of images
          docker compose -f ${{inputs.container_group}}-docker-compose.yml up --build ${{ matrix.dir }}
          # print list of images
          docker compose -f ${{inputs.container_group}}-docker-compose.yml images
          echo "IMAGE=$(docker compose -f ${{inputs.container_group}}-docker-compose.yml images | tail -n +2| awk '{printf "%s:%s", $2 ,$3}')"
          echo "IMAGE=$(docker compose -f ${{inputs.container_group}}-docker-compose.yml images | tail -n +2| awk '{printf "%s:%s", $2 ,$3}')" >> $GITHUB_OUTPUT
      - name: Test container
        run: |
          cd ${GITHUB_WORKSPACE}/modelzoo/docker/
          python3 -m virtualenv -p /usr/bin/python3 test_env
          . ./test_env/bin/activate
          pip install -r requirements.txt
          python test_runner.py --tests-yaml ./${{inputs.container_group}}/${{ matrix.dir }}/tests.yml --logs-dir ${GITHUB_WORKSPACE}/modelzoo/docker/logs/${{ matrix.dir }}/
      - name: Upload Logs
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: modelzoo/docker/logs/*
          retention-days: 15
      - uses: docker/login-action@v2
        with:
          registry: amr-registry.caas.intel.com
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Push Images to CAAS with build
        run: |
          echo ${{github.run_number}}
          echo ${{ steps.build-image.outputs.image }}
          image=${{ steps.build-image.outputs.image }}
          tag="${image#*:}"
          docker tag $image amr-registry.caas.intel.com/aiops/mlops-ci:b-${{github.run_number}}-$tag
          echo "amr-registry.caas.intel.com/aiops/mlops-ci:b-${{github.run_number}}-$tag"
          docker push amr-registry.caas.intel.com/aiops/mlops-ci:b-${{github.run_number}}-$tag

