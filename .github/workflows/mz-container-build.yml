name: Model Zoo Containers Build
on:
  workflow_dispatch:
    inputs:
      framework:
        description: 'Framework: Choose the framework to work with.'
        required: true
        type: choice
        options:
        - tensorflow
        - pytorch
      workload:
        description: 'Workload: Enter the workload to build and push (e.g.: bert-large-fp32-inference, all).'
        default: resnet50v1-5-fp32-training
        required: true
        type: string

jobs:
  build:
    runs-on: [self-hosted, Linux, X64]
    outputs:
      docker_images: ${{ steps.dockerfile_outputs.outputs.TAGS }}
    steps:
      - name: Cleanup
        run: |
          rm -rf *
          docker images | grep "model-zoo" | awk '{print $3}' | xargs docker rmi --force || echo "No images to remove"
      - uses: actions/checkout@v3
      - if: github.event.inputs.workload != 'all'
        name: Build a workload container
        run: |
          echo "Building ${{ github.event.inputs.workload }} workload"
          export PATH=$PATH:$(pwd)/tools/scripts
          model-builder make -f ${{ github.event.inputs.framework }} ${{ github.event.inputs.workload }}
      - if: github.event.inputs.workload == 'all'
        name: Build all workload containers
        run: |
          echo "Building all workloads"
          export PATH=$PATH:$(pwd)/tools/scripts
          model-builder make -f ${{ github.event.inputs.framework }}
      # - uses: actions/upload-artifact@v3
      #   with:
      #     name: Container Artifacts
      #     path: ./output/*
      - name: Save Dockerfiles
        id: dockerfile_outputs
        run: echo "::set-output name=TAGS::$(docker images --format "{{.Tag}}" --filter=reference=*model-zoo* | jq -R -s -c 'split("\n")[:-1]')"
  push-to-caas:
    needs: [build]
    runs-on: [self-hosted, Linux, X64]
    strategy:
      matrix:
        docker_images: ${{ fromJson(needs.build.outputs.docker_images) }}
    steps:
      - uses: actions/checkout@v3
      - uses: docker/login-action@v2
        with:
          registry: amr-registry.caas.intel.com
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Push to CAAS
        run: |
          docker tag model-zoo:${{ matrix.docker_images }} amr-registry.caas.intel.com/aiops/mlops-ci:B-${{github.run_number}}-${{ matrix.docker_images }}
          docker push amr-registry.caas.intel.com/aiops/mlops-ci:B-${{github.run_number}}-${{ matrix.docker_images }}
  scan:
    needs: [build, push-to-caas]
    runs-on: [self-hosted, Linux, X64]
    strategy:
      matrix:
        docker_images: ${{ fromJson(needs.build.outputs.docker_images) }}
    steps:
      - uses: actions/checkout@v3
      - name: SNYK Scan monitor
        uses: snyk/actions/docker@master
        env:
          SNYK_API: https://snyk.devtools.intel.com/api
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor
          image: amr-registry.caas.intel.com/aiops/mlops-ci:B-${{github.run_number}}-${{ matrix.docker_images }}
          json: true
      - name: SNYK Scan
        uses: snyk/actions/docker@master
        env:
          SNYK_API: https://snyk.devtools.intel.com/api
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: amr-registry.caas.intel.com/aiops/mlops-ci:B-${{github.run_number}}-${{ matrix.docker_images }}
          json: false
          args: --json-file-output=B-${{github.run_number}}-${{ matrix.docker_images }}.json
        continue-on-error: true
      # - uses: actions/upload-artifact@v3
      #   with:
      #     name: Container Artifacts
      #     path: ./B-${{github.run_number}}-${{ matrix.docker_images }}.json
      - name: Cleanup images
        run: |
          cat B-${{github.run_number}}-${{ matrix.docker_images }}.json
          docker images | grep "mlops-ci" | awk '{print $3}' | xargs docker rmi --force || echo "No images to remove"
