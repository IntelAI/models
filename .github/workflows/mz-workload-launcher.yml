name: Model Zoo Workload Tests Launcher
on:
  pull_request:
    branches: [develop]
  workflow_call:
    inputs:
      aikit_release:
          description: 'Target AIKit version'
          required: true
          type: string
      is_lkg_drop:
        description: 'LKG drop flag'
        required: true
        type: boolean

jobs:
  setup:
    runs-on: [self-hosted, gasp]
    outputs:
      tensorflow-tests: ${{ steps.set-input.outputs.TENSORFLOW_TESTS }}
      pytorch-tests: ${{ steps.set-input.outputs.PYTORCH_TESTS }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Define matrix - CPU
      id: set-input
      run: |
        # Read input json file objects and define them as a matrix
        echo "TENSORFLOW_TESTS=$(jq -c '.data' .github/config/MZ-TensorFlow.json)" >> $GITHUB_OUTPUT
        # echo "ITEX_XPU_TESTS=$(jq -c '.data' .github/config/MZ-ITEX-XPU.json)" >> $GITHUB_OUTPUT
        # echo "IPEX_XPU_TESTS=$(jq -c '.data' .github/config/MZ-IPEX-XPU.json)" >> $GITHUB_OUTPUT
        echo "PYTORCH_TESTS=$(jq -c '.data' .github/config/MZ-PyTorch.json)" >> $GITHUB_OUTPUT

  test-TENSORFLOW:
    secrets: inherit
    needs: setup
    strategy:
      matrix:
        tests_arr: ${{ fromJson(needs.setup.outputs.tensorflow-tests) }}
      fail-fast: false
    uses: intel-innersource/frameworks.ai.models.intel-models/.github/workflows/mz-workload-tests.yml@develop
    with:
      runner_label: tf_dataset
      workload: ${{ matrix.tests_arr.workload }}
      framework: ${{ matrix.tests_arr.framework }}
      framework_version: ${{ matrix.tests_arr.framework_version }}
      script: ${{ matrix.tests_arr.test.script }}
      aikit_release: ${{ inputs.aikit_release || '2024.0.0' }}
      is_lkg_drop: ${{ inputs.is_lkg_drop || false }}
      precisions: "['${{ matrix.tests_arr.test.precision[0] }}','${{ matrix.tests_arr.test.precision[1] }}','${{ matrix.tests_arr.test.precision[2] }}','${{ matrix.tests_arr.test.precision[3] }}','${{ matrix.tests_arr.test.precision[4] }}']"
      dataset: ${{ matrix.tests_arr.test.dataset }}
      benchmark: ${{ matrix.tests_arr.test.benchmark }}
      thresholds: "['${{ matrix.tests_arr.test.threshold[0] }}','${{ matrix.tests_arr.test.threshold[1] }}','${{ matrix.tests_arr.test.threshold[2] }}','${{ matrix.tests_arr.test.threshold[3] }}','${{ matrix.tests_arr.test.threshold[4] }}']"
      tolerance: ${{ matrix.tests_arr.test.tolerance }}

  test-PYTORCH:
    secrets: inherit
    needs: setup
    strategy:
      matrix:
        tests_arr: ${{ fromJson(needs.setup.outputs.pytorch-tests) }}
      fail-fast: false
    uses: intel-innersource/frameworks.ai.models.intel-models/.github/workflows/mz-workload-tests.yml@develop
    with:
      runner_label: pytorch
      workload: ${{ matrix.tests_arr.workload }}
      framework: ${{ matrix.tests_arr.framework }}
      framework_version: ${{ matrix.tests_arr.framework_version }}
      script: ${{ matrix.tests_arr.test.script }}
      aikit_release: ${{ inputs.aikit_release || '2024.0.0' }}
      is_lkg_drop: ${{ inputs.is_lkg_drop || false }}
      precisions: "['${{ matrix.tests_arr.test.precision[0] }}','${{ matrix.tests_arr.test.precision[1] }}','${{ matrix.tests_arr.test.precision[2] }}','${{ matrix.tests_arr.test.precision[3] }}','${{ matrix.tests_arr.test.precision[4] }}']"
      dataset: ${{ matrix.tests_arr.test.dataset }}
      benchmark: ${{ matrix.tests_arr.test.benchmark }}
      thresholds: "['${{ matrix.tests_arr.test.threshold[0] }}','${{ matrix.tests_arr.test.threshold[1] }}','${{ matrix.tests_arr.test.threshold[2] }}','${{ matrix.tests_arr.test.threshold[3] }}','${{ matrix.tests_arr.test.threshold[4] }}']"
      tolerance: ${{ matrix.tests_arr.test.tolerance }}

  display-results:
    if: github.event_name != 'pull_request' || contains(github.event.workflow, 'cicd-pipeline')
    secrets: inherit
    needs: [test-TENSORFLOW, test-PYTORCH]
    uses: intel-innersource/frameworks.ai.models.intel-models/.github/workflows/mz-workload-performance.yml@develop
